{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNR6gW/EZVv/zQqo3DuqOzi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/likitha888/python/blob/main/Automobile\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "from sklearn.model_selection import cross_val_score,train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn import datasets,linear_model\n",
        "from scipy import linalg\n",
        "df=pd.read_csv(\"/automobile.csv\")"
      ],
      "metadata": {
        "id": "O0HccATuA7AE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uCoHsxCsFqnI",
        "outputId": "6955d7a7-1a2a-4c01-9147-1f9ca5571367"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6019 entries, 0 to 6018\n",
            "Data columns (total 11 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   Price         6019 non-null   float64\n",
            " 1   Make          6019 non-null   object \n",
            " 2   Location      6019 non-null   object \n",
            " 3   Age           6019 non-null   int64  \n",
            " 4   Odometer      6019 non-null   int64  \n",
            " 5   FuelType      6019 non-null   object \n",
            " 6   Transmission  6019 non-null   object \n",
            " 7   OwnerType     6019 non-null   object \n",
            " 8   Mileage       6019 non-null   object \n",
            " 9   EngineCC      6019 non-null   object \n",
            " 10  PowerBhp      6019 non-null   object \n",
            "dtypes: float64(1), int64(2), object(8)\n",
            "memory usage: 517.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "jL4pBJAcHwdu",
        "outputId": "bc183aff-82d8-4cef-d06f-f6bbae3916f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Price          Make    Location  Age  Odometer FuelType Transmission  \\\n",
              "0   1.75  marutiwagonr      Mumbai   10     72000      CNG       Manual   \n",
              "1  12.50  hyundaicreta        Pune    5     41000   Diesel       Manual   \n",
              "2   4.50     hondajazz     Chennai    9     46000   Petrol       Manual   \n",
              "3   6.00  marutiertiga     Chennai    8     87000   Diesel       Manual   \n",
              "4  17.74        audia4  Coimbatore    7     40670   Diesel    Automatic   \n",
              "\n",
              "  OwnerType Mileage EngineCC PowerBhp  \n",
              "0     First    26.6      998    58.16  \n",
              "1     First   19.67     1582    126.2  \n",
              "2     First    18.2     1199     88.7  \n",
              "3     First   20.77     1248    88.76  \n",
              "4    Second    15.2     1968    140.8  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c98f4991-69a1-4d78-ba33-addeb52d9230\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Make</th>\n",
              "      <th>Location</th>\n",
              "      <th>Age</th>\n",
              "      <th>Odometer</th>\n",
              "      <th>FuelType</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>OwnerType</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>EngineCC</th>\n",
              "      <th>PowerBhp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.75</td>\n",
              "      <td>marutiwagonr</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>10</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.6</td>\n",
              "      <td>998</td>\n",
              "      <td>58.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12.50</td>\n",
              "      <td>hyundaicreta</td>\n",
              "      <td>Pune</td>\n",
              "      <td>5</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67</td>\n",
              "      <td>1582</td>\n",
              "      <td>126.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.50</td>\n",
              "      <td>hondajazz</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>9</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.2</td>\n",
              "      <td>1199</td>\n",
              "      <td>88.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6.00</td>\n",
              "      <td>marutiertiga</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>8</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77</td>\n",
              "      <td>1248</td>\n",
              "      <td>88.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17.74</td>\n",
              "      <td>audia4</td>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>7</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1968</td>\n",
              "      <td>140.8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c98f4991-69a1-4d78-ba33-addeb52d9230')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c98f4991-69a1-4d78-ba33-addeb52d9230 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c98f4991-69a1-4d78-ba33-addeb52d9230');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-72768f24-aeb3-4579-80b7-be2698d55760\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72768f24-aeb3-4579-80b7-be2698d55760')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-72768f24-aeb3-4579-80b7-be2698d55760 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6019,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.1879171124555,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1373,\n        \"samples\": [\n          10.99,\n          45.86,\n          3.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Make\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 217,\n        \"samples\": [\n          \"fordmustang\",\n          \"bentleycontinental\",\n          \"jaguarxj\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Jaipur\",\n          \"Mumbai\",\n          \"Bangalore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 22,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          10,\n          14,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Odometer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91268,\n        \"min\": 171,\n        \"max\": 6500000,\n        \"num_unique_values\": 3093,\n        \"samples\": [\n          66484,\n          20364,\n          15134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FuelType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Diesel\",\n          \"Electric\",\n          \"Petrol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OwnerType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Second\",\n          \"Third\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 438,\n        \"samples\": [\n          \"11.56\",\n          \"16.2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EngineCC\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 156,\n        \"samples\": [\n          \"1590\",\n          \"1794\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PowerBhp\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 390,\n        \"samples\": [\n          \"74\",\n          \"105\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Xpv80pihH2JO",
        "outputId": "641cadfd-920f-4e17-f3a9-869b235524c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Price          Age      Odometer\n",
              "count  6019.000000  6019.000000  6.019000e+03\n",
              "mean      9.479468     6.641801  5.873838e+04\n",
              "std      11.187917     3.269742  9.126884e+04\n",
              "min       0.440000     1.000000  1.710000e+02\n",
              "25%       3.500000     4.000000  3.400000e+04\n",
              "50%       5.640000     6.000000  5.300000e+04\n",
              "75%       9.950000     9.000000  7.300000e+04\n",
              "max     160.000000    22.000000  6.500000e+06"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae7d3bee-294c-451f-a056-c97db505f9af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Odometer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6019.000000</td>\n",
              "      <td>6019.000000</td>\n",
              "      <td>6.019000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>9.479468</td>\n",
              "      <td>6.641801</td>\n",
              "      <td>5.873838e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11.187917</td>\n",
              "      <td>3.269742</td>\n",
              "      <td>9.126884e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.440000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.710000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.400000e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.640000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.300000e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>9.950000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>7.300000e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>160.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>6.500000e+06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae7d3bee-294c-451f-a056-c97db505f9af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae7d3bee-294c-451f-a056-c97db505f9af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae7d3bee-294c-451f-a056-c97db505f9af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-776ce639-31a8-4b38-9c37-4d3b1053ecc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-776ce639-31a8-4b38-9c37-4d3b1053ecc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-776ce639-31a8-4b38-9c37-4d3b1053ecc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2118.60861586734,\n        \"min\": 0.44,\n        \"max\": 6019.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.47946835022429,\n          5.64,\n          6019.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2125.425602228082,\n        \"min\": 1.0,\n        \"max\": 6019.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.641800963615219,\n          6.0,\n          6019.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Odometer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2282340.352199672,\n        \"min\": 171.0,\n        \"max\": 6500000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          58738.38029573019,\n          53000.0,\n          6019.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.distplot(df.Price)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        },
        "id": "iPdnEVAwIC9A",
        "outputId": "f0801af4-67f1-4726-bc95-bd06c6da6c0c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9735dbd834fb>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df.Price)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Price', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(df.Age)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        },
        "id": "1Zw4Ap_6Isxy",
        "outputId": "5eaf9c96-87cf-4f48-e564-e4d80b80dbdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-b2378c9d8a20>:1: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df.Age)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(df.Odometer)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        },
        "id": "jByz2UZeKrIi",
        "outputId": "3599ef47-8d02-4d39-b0c5-475dfd6f29e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-8040ec08a079>:1: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df.Odometer)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Odometer', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x=df.Age,y=df.Price)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "FwtmAycNKtyI",
        "outputId": "2300c7a3-3605-4d66-dd58-43dfd9364915"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Age', ylabel='Price'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Make.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "cGh_vorjKyzu",
        "outputId": "d9d1dfd9-a5bc-4400-b93f-43e5e385a9d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Make\n",
              "marutiswift         353\n",
              "hondacity           270\n",
              "hyundaii20          247\n",
              "hyundaiverna        170\n",
              "hyundaii10          156\n",
              "                   ... \n",
              "volkswagentiguan      1\n",
              "fiatpetra             1\n",
              "volkswagenbeetle      1\n",
              "porscheboxster        1\n",
              "jaguarf               1\n",
              "Name: count, Length: 217, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Make</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>marutiswift</th>\n",
              "      <td>353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hondacity</th>\n",
              "      <td>270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hyundaii20</th>\n",
              "      <td>247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hyundaiverna</th>\n",
              "      <td>170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hyundaii10</th>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volkswagentiguan</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fiatpetra</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>volkswagenbeetle</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>porscheboxster</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>jaguarf</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>217 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vZO2sxJEK4SP",
        "outputId": "b9984a68-f1eb-455f-f362-0f21926afa47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Price', 'Make', 'Location', 'Age', 'Odometer', 'FuelType',\n",
              "       'Transmission', 'OwnerType', 'Mileage', 'EngineCC', 'PowerBhp'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['mileage']=pd.to_numeric(df.Mileage.replace('+AC0-1',None))"
      ],
      "metadata": {
        "id": "fg-9-hsqLLzc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "set(df.mileage)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "erodB0nuLW3P",
        "outputId": "dd8cfe46-bd09-4eef-b2c7-4159163cfb43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{6.4,\n",
              " 7.5,\n",
              " 7.81,\n",
              " 7.94,\n",
              " 8.0,\n",
              " 8.3,\n",
              " 8.5,\n",
              " 8.77,\n",
              " 9.0,\n",
              " 9.3,\n",
              " 9.5,\n",
              " 9.52,\n",
              " 9.74,\n",
              " 9.8,\n",
              " 10.0,\n",
              " 10.5,\n",
              " 10.8,\n",
              " 10.91,\n",
              " 11.0,\n",
              " 11.05,\n",
              " 11.25,\n",
              " 11.3,\n",
              " 11.33,\n",
              " 11.36,\n",
              " 11.5,\n",
              " 11.72,\n",
              " 11.74,\n",
              " 11.8,\n",
              " 12.0,\n",
              " 12.05,\n",
              " 12.19,\n",
              " 12.3,\n",
              " 12.38,\n",
              " 12.39,\n",
              " 12.5,\n",
              " 12.55,\n",
              " 12.7,\n",
              " 12.8,\n",
              " 12.83,\n",
              " 12.86,\n",
              " 12.97,\n",
              " 13.0,\n",
              " 13.14,\n",
              " 13.17,\n",
              " 13.22,\n",
              " 13.33,\n",
              " 13.44,\n",
              " 13.5,\n",
              " 13.58,\n",
              " 13.8,\n",
              " 14.0,\n",
              " 14.02,\n",
              " 14.16,\n",
              " 14.3,\n",
              " 14.33,\n",
              " 14.36,\n",
              " 14.39,\n",
              " 14.42,\n",
              " 14.47,\n",
              " 14.66,\n",
              " 14.67,\n",
              " 14.69,\n",
              " 14.75,\n",
              " 14.8,\n",
              " 14.83,\n",
              " 14.84,\n",
              " 14.94,\n",
              " 15.0,\n",
              " 15.11,\n",
              " 15.17,\n",
              " 15.2,\n",
              " 15.3,\n",
              " 15.41,\n",
              " 15.42,\n",
              " 15.5,\n",
              " 15.64,\n",
              " 15.72,\n",
              " 15.8,\n",
              " 15.97,\n",
              " 16.0,\n",
              " 16.02,\n",
              " 16.05,\n",
              " 16.25,\n",
              " 16.3,\n",
              " 16.36,\n",
              " 16.38,\n",
              " 16.47,\n",
              " 16.5,\n",
              " 16.52,\n",
              " 16.55,\n",
              " 16.77,\n",
              " 16.78,\n",
              " 16.8,\n",
              " 17.0,\n",
              " 17.05,\n",
              " 17.11,\n",
              " 17.16,\n",
              " 17.19,\n",
              " 17.24,\n",
              " 17.3,\n",
              " 17.32,\n",
              " 17.44,\n",
              " 17.5,\n",
              " 17.67,\n",
              " 17.72,\n",
              " 17.8,\n",
              " 17.88,\n",
              " 17.92,\n",
              " 17.97,\n",
              " 18.0,\n",
              " 18.2,\n",
              " 18.25,\n",
              " 18.3,\n",
              " 18.33,\n",
              " 18.42,\n",
              " 18.49,\n",
              " 18.5,\n",
              " 18.51,\n",
              " 18.53,\n",
              " 18.78,\n",
              " 18.8,\n",
              " 18.86,\n",
              " 18.88,\n",
              " 19.0,\n",
              " 19.01,\n",
              " 19.08,\n",
              " 19.2,\n",
              " 19.27,\n",
              " 19.3,\n",
              " 19.33,\n",
              " 19.49,\n",
              " 19.5,\n",
              " 19.64,\n",
              " 19.67,\n",
              " 19.7,\n",
              " 19.72,\n",
              " 19.83,\n",
              " 19.98,\n",
              " 20.0,\n",
              " 20.14,\n",
              " 20.3,\n",
              " 20.36,\n",
              " 20.45,\n",
              " 20.5,\n",
              " 20.51,\n",
              " 20.54,\n",
              " 20.58,\n",
              " 20.64,\n",
              " 20.7,\n",
              " 20.73,\n",
              " 20.77,\n",
              " 20.86,\n",
              " 20.89,\n",
              " 20.92,\n",
              " 21.0,\n",
              " 21.02,\n",
              " 21.03,\n",
              " 21.1,\n",
              " 21.14,\n",
              " 21.2,\n",
              " 21.27,\n",
              " 21.5,\n",
              " 21.56,\n",
              " 21.64,\n",
              " 21.7,\n",
              " 21.72,\n",
              " 21.76,\n",
              " 21.8,\n",
              " 22.24,\n",
              " 22.3,\n",
              " 22.48,\n",
              " 22.7,\n",
              " 22.74,\n",
              " 22.77,\n",
              " 22.8,\n",
              " 22.95,\n",
              " 23.01,\n",
              " 23.08,\n",
              " 23.2,\n",
              " 23.3,\n",
              " 23.8,\n",
              " 24.2,\n",
              " 24.3,\n",
              " 24.52,\n",
              " 24.7,\n",
              " 24.8,\n",
              " 25.01,\n",
              " 25.17,\n",
              " 25.2,\n",
              " 25.4,\n",
              " 25.8,\n",
              " 25.83,\n",
              " 26.0,\n",
              " 26.2,\n",
              " 26.3,\n",
              " 26.6,\n",
              " 26.8,\n",
              " 26.83,\n",
              " 27.3,\n",
              " 27.39,\n",
              " 27.4,\n",
              " 28.09,\n",
              " 28.4,\n",
              " 31.79,\n",
              " 33.44,\n",
              " 33.54,\n",
              " nan,\n",
              " 22.0,\n",
              " 22.5,\n",
              " 23.0,\n",
              " 23.03,\n",
              " 23.5,\n",
              " nan,\n",
              " 24.0,\n",
              " 24.5,\n",
              " 25.0,\n",
              " 25.47,\n",
              " 25.5,\n",
              " nan,\n",
              " 27.03,\n",
              " 27.28,\n",
              " nan,\n",
              " nan,\n",
              " 8.1,\n",
              " 8.2,\n",
              " 8.45,\n",
              " 8.6,\n",
              " 8.7,\n",
              " 9.1,\n",
              " 9.7,\n",
              " 10.1,\n",
              " 10.13,\n",
              " 10.2,\n",
              " 10.6,\n",
              " 10.98,\n",
              " 11.07,\n",
              " 11.1,\n",
              " 11.2,\n",
              " 11.57,\n",
              " 11.7,\n",
              " 11.79,\n",
              " 12.07,\n",
              " 12.1,\n",
              " 12.35,\n",
              " 12.51,\n",
              " 12.6,\n",
              " 12.63,\n",
              " 12.85,\n",
              " 12.95,\n",
              " 12.98,\n",
              " 13.01,\n",
              " 13.1,\n",
              " 13.2,\n",
              " 13.29,\n",
              " 13.45,\n",
              " 13.6,\n",
              " 13.7,\n",
              " 13.73,\n",
              " 14.07,\n",
              " 14.1,\n",
              " 14.2,\n",
              " 14.45,\n",
              " 14.57,\n",
              " 14.6,\n",
              " 14.7,\n",
              " 14.95,\n",
              " 15.04,\n",
              " 15.1,\n",
              " 15.26,\n",
              " 15.29,\n",
              " 15.6,\n",
              " 15.63,\n",
              " 15.7,\n",
              " 15.73,\n",
              " 15.85,\n",
              " 16.07,\n",
              " 16.1,\n",
              " 16.2,\n",
              " 16.6,\n",
              " 16.7,\n",
              " 16.73,\n",
              " 16.76,\n",
              " 16.82,\n",
              " 16.95,\n",
              " 16.98,\n",
              " 17.01,\n",
              " 17.1,\n",
              " 17.2,\n",
              " 17.45,\n",
              " 17.54,\n",
              " 17.57,\n",
              " 17.6,\n",
              " 17.7,\n",
              " 17.85,\n",
              " 18.1,\n",
              " 18.16,\n",
              " 18.19,\n",
              " 18.23,\n",
              " 18.44,\n",
              " 18.48,\n",
              " 18.6,\n",
              " 18.69,\n",
              " 18.7,\n",
              " 19.1,\n",
              " 19.16,\n",
              " 19.44,\n",
              " 19.6,\n",
              " 19.63,\n",
              " 19.69,\n",
              " 19.91,\n",
              " 20.38,\n",
              " 20.63,\n",
              " 20.85,\n",
              " 21.13,\n",
              " 21.19,\n",
              " 21.38,\n",
              " 21.66,\n",
              " 21.79,\n",
              " 22.07,\n",
              " 22.1,\n",
              " 22.32,\n",
              " 22.54,\n",
              " 22.69,\n",
              " 23.1,\n",
              " 23.19,\n",
              " 23.57,\n",
              " 24.04,\n",
              " 24.07,\n",
              " 24.6,\n",
              " 25.1,\n",
              " 25.32,\n",
              " 25.44,\n",
              " 25.6,\n",
              " 26.1,\n",
              " 32.26,\n",
              " nan,\n",
              " 9.43,\n",
              " 9.9,\n",
              " 10.37,\n",
              " 10.4,\n",
              " 10.9,\n",
              " 10.93,\n",
              " 11.18,\n",
              " 11.4,\n",
              " 11.49,\n",
              " 11.56,\n",
              " 11.62,\n",
              " 11.68,\n",
              " 11.78,\n",
              " 11.9,\n",
              " 12.37,\n",
              " 12.4,\n",
              " 12.62,\n",
              " 12.65,\n",
              " 12.81,\n",
              " 12.9,\n",
              " 12.99,\n",
              " 13.06,\n",
              " 13.24,\n",
              " 13.4,\n",
              " 13.49,\n",
              " 13.9,\n",
              " 14.4,\n",
              " 14.59,\n",
              " 14.62,\n",
              " 14.9,\n",
              " 15.15,\n",
              " 15.4,\n",
              " 15.87,\n",
              " 15.9,\n",
              " nan,\n",
              " nan,\n",
              " 13.53,\n",
              " 13.68,\n",
              " 13.93,\n",
              " 14.21,\n",
              " 14.24,\n",
              " 14.28,\n",
              " 14.49,\n",
              " 14.53,\n",
              " 14.74,\n",
              " 14.81,\n",
              " 15.06,\n",
              " 15.68,\n",
              " 15.74,\n",
              " 15.96,\n",
              " 16.09,\n",
              " 16.12,\n",
              " 16.4,\n",
              " 16.46,\n",
              " 16.51,\n",
              " 16.9,\n",
              " 16.93,\n",
              " 16.96,\n",
              " 17.06,\n",
              " 17.09,\n",
              " 17.21,\n",
              " 17.4,\n",
              " 17.43,\n",
              " 17.68,\n",
              " 17.71,\n",
              " 17.84,\n",
              " 17.9,\n",
              " 18.06,\n",
              " 18.12,\n",
              " 18.15,\n",
              " 18.18,\n",
              " 18.4,\n",
              " 18.56,\n",
              " 18.59,\n",
              " 18.9,\n",
              " 19.09,\n",
              " 19.12,\n",
              " 19.15,\n",
              " 19.34,\n",
              " 19.4,\n",
              " 19.59,\n",
              " 19.68,\n",
              " 19.71,\n",
              " 19.81,\n",
              " 19.87,\n",
              " 20.34,\n",
              " 20.37,\n",
              " 20.4,\n",
              " 20.46,\n",
              " 20.62,\n",
              " 20.65,\n",
              " 20.68,\n",
              " 21.12,\n",
              " 21.21,\n",
              " 21.4,\n",
              " 21.43,\n",
              " 21.9,\n",
              " 22.71,\n",
              " 22.9,\n",
              " 23.4,\n",
              " 23.59,\n",
              " 23.65,\n",
              " 23.84,\n",
              " 23.9,\n",
              " 24.4,\n",
              " 26.21,\n",
              " 26.59,\n",
              " 27.62,\n",
              " 30.46,\n",
              " nan}"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['PowerBhp']=pd.to_numeric(df.PowerBhp.replace('+AC0-1',None))"
      ],
      "metadata": {
        "id": "C5rRDtCkLane"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "set(df.mileage)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dUh-kcuWLkge",
        "outputId": "48cb4d1a-90ef-4095-b9d2-e2b6f4a2c0bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{6.4,\n",
              " 7.5,\n",
              " 7.81,\n",
              " 7.94,\n",
              " 8.0,\n",
              " 8.1,\n",
              " 8.2,\n",
              " 8.45,\n",
              " 8.5,\n",
              " 8.6,\n",
              " 8.7,\n",
              " 9.0,\n",
              " 9.1,\n",
              " 9.43,\n",
              " 9.5,\n",
              " 9.52,\n",
              " 9.7,\n",
              " 10.0,\n",
              " 10.1,\n",
              " 10.13,\n",
              " 10.2,\n",
              " 10.5,\n",
              " 10.6,\n",
              " 10.8,\n",
              " 10.91,\n",
              " 10.98,\n",
              " 11.0,\n",
              " 11.07,\n",
              " 11.1,\n",
              " 11.2,\n",
              " 11.25,\n",
              " 11.33,\n",
              " 11.36,\n",
              " 11.5,\n",
              " 11.57,\n",
              " 11.7,\n",
              " 11.72,\n",
              " 11.79,\n",
              " 12.0,\n",
              " 12.07,\n",
              " 12.1,\n",
              " 12.19,\n",
              " 12.35,\n",
              " 12.38,\n",
              " 12.39,\n",
              " 12.5,\n",
              " 12.51,\n",
              " 12.6,\n",
              " 12.63,\n",
              " 12.7,\n",
              " 12.83,\n",
              " 12.85,\n",
              " 12.86,\n",
              " 12.95,\n",
              " 12.97,\n",
              " 12.98,\n",
              " 13.0,\n",
              " 13.01,\n",
              " 13.1,\n",
              " 13.14,\n",
              " 13.17,\n",
              " 13.2,\n",
              " 13.22,\n",
              " 13.29,\n",
              " 13.33,\n",
              " 13.44,\n",
              " 13.45,\n",
              " 13.5,\n",
              " 13.58,\n",
              " 13.6,\n",
              " 13.7,\n",
              " 13.73,\n",
              " 14.0,\n",
              " 14.07,\n",
              " 14.1,\n",
              " 14.16,\n",
              " 14.2,\n",
              " 14.36,\n",
              " 14.39,\n",
              " 14.42,\n",
              " 14.45,\n",
              " 14.47,\n",
              " 14.57,\n",
              " 14.6,\n",
              " 14.66,\n",
              " 14.67,\n",
              " 14.69,\n",
              " 14.7,\n",
              " 14.75,\n",
              " 14.84,\n",
              " 14.94,\n",
              " 14.95,\n",
              " 15.0,\n",
              " 15.04,\n",
              " 15.1,\n",
              " 15.11,\n",
              " 15.17,\n",
              " 15.2,\n",
              " 15.26,\n",
              " 15.29,\n",
              " 15.41,\n",
              " 15.42,\n",
              " 15.5,\n",
              " 15.6,\n",
              " 15.63,\n",
              " 15.64,\n",
              " 15.7,\n",
              " 15.72,\n",
              " 15.73,\n",
              " 15.85,\n",
              " 15.97,\n",
              " 16.0,\n",
              " 16.07,\n",
              " 16.1,\n",
              " 16.2,\n",
              " 16.25,\n",
              " 16.36,\n",
              " 16.38,\n",
              " 16.47,\n",
              " 16.5,\n",
              " 16.6,\n",
              " 16.7,\n",
              " 16.73,\n",
              " 16.76,\n",
              " 16.78,\n",
              " 16.8,\n",
              " 16.82,\n",
              " 16.95,\n",
              " 16.98,\n",
              " 17.0,\n",
              " 17.01,\n",
              " 17.1,\n",
              " 17.11,\n",
              " 17.16,\n",
              " 17.19,\n",
              " 17.2,\n",
              " 17.32,\n",
              " 17.44,\n",
              " 17.45,\n",
              " 17.5,\n",
              " 17.54,\n",
              " 17.57,\n",
              " 17.6,\n",
              " 17.67,\n",
              " 17.7,\n",
              " 17.72,\n",
              " 17.85,\n",
              " 17.88,\n",
              " 17.92,\n",
              " 17.97,\n",
              " 18.0,\n",
              " 18.1,\n",
              " 18.16,\n",
              " 18.19,\n",
              " 18.2,\n",
              " 18.23,\n",
              " 18.25,\n",
              " 18.33,\n",
              " 18.42,\n",
              " 18.44,\n",
              " 18.48,\n",
              " 18.5,\n",
              " 18.51,\n",
              " 18.53,\n",
              " 18.6,\n",
              " 18.69,\n",
              " 18.7,\n",
              " 18.78,\n",
              " 18.86,\n",
              " 18.88,\n",
              " 19.0,\n",
              " 19.01,\n",
              " 19.08,\n",
              " 19.1,\n",
              " 19.16,\n",
              " 19.2,\n",
              " 19.33,\n",
              " 19.44,\n",
              " 19.5,\n",
              " 19.6,\n",
              " 19.63,\n",
              " 19.64,\n",
              " 19.67,\n",
              " 19.69,\n",
              " 19.7,\n",
              " 19.72,\n",
              " 19.83,\n",
              " 19.91,\n",
              " 19.98,\n",
              " 20.0,\n",
              " 20.14,\n",
              " 20.36,\n",
              " 20.38,\n",
              " 20.45,\n",
              " 20.5,\n",
              " 20.51,\n",
              " 20.54,\n",
              " 20.58,\n",
              " 20.63,\n",
              " 20.64,\n",
              " 20.7,\n",
              " 20.73,\n",
              " 20.77,\n",
              " 20.85,\n",
              " 20.86,\n",
              " 20.89,\n",
              " 20.92,\n",
              " 21.0,\n",
              " 21.03,\n",
              " 21.1,\n",
              " 21.13,\n",
              " 21.14,\n",
              " 21.19,\n",
              " 21.2,\n",
              " 21.38,\n",
              " 21.5,\n",
              " 21.56,\n",
              " 21.64,\n",
              " 21.66,\n",
              " 21.7,\n",
              " 21.72,\n",
              " 21.76,\n",
              " 21.79,\n",
              " 22.0,\n",
              " 22.07,\n",
              " 22.1,\n",
              " 22.3,\n",
              " 22.32,\n",
              " 22.48,\n",
              " 22.5,\n",
              " 22.54,\n",
              " 22.69,\n",
              " 22.7,\n",
              " 22.95,\n",
              " 23.0,\n",
              " 23.01,\n",
              " 23.03,\n",
              " 23.08,\n",
              " 23.1,\n",
              " 23.19,\n",
              " 23.2,\n",
              " 23.5,\n",
              " 23.57,\n",
              " 24.0,\n",
              " 24.04,\n",
              " 24.07,\n",
              " 24.2,\n",
              " 24.3,\n",
              " 24.5,\n",
              " 24.52,\n",
              " 24.6,\n",
              " 24.7,\n",
              " 25.0,\n",
              " 25.01,\n",
              " 25.1,\n",
              " 25.17,\n",
              " 25.2,\n",
              " 25.32,\n",
              " 25.4,\n",
              " 25.44,\n",
              " 25.47,\n",
              " 25.5,\n",
              " 25.6,\n",
              " 25.8,\n",
              " 25.83,\n",
              " 26.0,\n",
              " 26.1,\n",
              " 26.2,\n",
              " 26.6,\n",
              " 26.83,\n",
              " 27.03,\n",
              " 27.28,\n",
              " 27.39,\n",
              " 27.4,\n",
              " 28.09,\n",
              " 28.4,\n",
              " 31.79,\n",
              " 32.26,\n",
              " 33.44,\n",
              " nan,\n",
              " 8.3,\n",
              " 8.77,\n",
              " 9.3,\n",
              " 9.74,\n",
              " 9.8,\n",
              " 9.9,\n",
              " 10.37,\n",
              " 10.4,\n",
              " 10.9,\n",
              " 10.93,\n",
              " 11.05,\n",
              " 11.18,\n",
              " 11.3,\n",
              " 11.4,\n",
              " 11.49,\n",
              " 11.56,\n",
              " 11.62,\n",
              " 11.68,\n",
              " 11.74,\n",
              " 11.78,\n",
              " 11.8,\n",
              " 11.9,\n",
              " 12.05,\n",
              " 12.3,\n",
              " 12.37,\n",
              " 12.4,\n",
              " 12.55,\n",
              " 12.62,\n",
              " 12.65,\n",
              " 12.8,\n",
              " 12.81,\n",
              " 12.9,\n",
              " 12.99,\n",
              " 13.06,\n",
              " 13.24,\n",
              " 13.4,\n",
              " 13.49,\n",
              " 13.53,\n",
              " 13.68,\n",
              " 13.8,\n",
              " 13.9,\n",
              " 13.93,\n",
              " 14.02,\n",
              " 14.21,\n",
              " 14.24,\n",
              " 14.28,\n",
              " 14.3,\n",
              " 14.33,\n",
              " 14.4,\n",
              " 14.49,\n",
              " 14.53,\n",
              " 14.59,\n",
              " 14.62,\n",
              " 14.74,\n",
              " 14.8,\n",
              " 14.81,\n",
              " 14.83,\n",
              " 14.9,\n",
              " 15.06,\n",
              " 15.15,\n",
              " 15.3,\n",
              " 15.4,\n",
              " 15.68,\n",
              " 15.74,\n",
              " 15.8,\n",
              " 15.87,\n",
              " 15.9,\n",
              " 15.96,\n",
              " 16.02,\n",
              " 16.05,\n",
              " 16.4,\n",
              " 16.46,\n",
              " 16.51,\n",
              " 16.9,\n",
              " 16.93,\n",
              " 16.96,\n",
              " 17.21,\n",
              " 17.4,\n",
              " 17.43,\n",
              " 17.68,\n",
              " 17.71,\n",
              " 17.9,\n",
              " 18.15,\n",
              " 18.18,\n",
              " 18.4,\n",
              " 18.9,\n",
              " 19.15,\n",
              " 19.4,\n",
              " 19.68,\n",
              " 19.71,\n",
              " nan,\n",
              " 20.4,\n",
              " 20.46,\n",
              " 20.65,\n",
              " 20.68,\n",
              " 21.21,\n",
              " 21.4,\n",
              " 21.43,\n",
              " 21.9,\n",
              " nan,\n",
              " 22.71,\n",
              " 22.9,\n",
              " 23.4,\n",
              " 23.65,\n",
              " 23.9,\n",
              " 24.4,\n",
              " 26.21,\n",
              " 30.46,\n",
              " nan,\n",
              " 16.09,\n",
              " 16.12,\n",
              " 16.3,\n",
              " 16.52,\n",
              " 16.55,\n",
              " 16.77,\n",
              " 17.05,\n",
              " 17.06,\n",
              " 17.09,\n",
              " 17.24,\n",
              " 17.3,\n",
              " 17.8,\n",
              " 17.84,\n",
              " 18.06,\n",
              " 18.12,\n",
              " 18.3,\n",
              " 18.49,\n",
              " 18.56,\n",
              " 18.59,\n",
              " 18.8,\n",
              " 19.09,\n",
              " 19.12,\n",
              " 19.27,\n",
              " 19.3,\n",
              " 19.34,\n",
              " 19.49,\n",
              " 19.59,\n",
              " 19.81,\n",
              " 19.87,\n",
              " 20.3,\n",
              " 20.34,\n",
              " 20.37,\n",
              " 20.62,\n",
              " 21.02,\n",
              " 21.12,\n",
              " 21.27,\n",
              " 21.8,\n",
              " 22.24,\n",
              " 22.74,\n",
              " 22.77,\n",
              " 22.8,\n",
              " 23.3,\n",
              " 23.59,\n",
              " 23.8,\n",
              " 23.84,\n",
              " 24.8,\n",
              " 26.3,\n",
              " 26.59,\n",
              " 26.8,\n",
              " 27.3,\n",
              " 27.62,\n",
              " 33.54,\n",
              " nan,\n",
              " nan,\n",
              " nan,\n",
              " nan,\n",
              " nan}"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['EngineCC']=pd.to_numeric(df.EngineCC.replace('+AC0-1',None))\n",
        "set(df.EngineCC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkY-Vx2rLqnm",
        "outputId": "9baf40de-b47b-401c-da1f-b571b59df3bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{72.0,\n",
              " 624.0,\n",
              " 793.0,\n",
              " 796.0,\n",
              " 799.0,\n",
              " 814.0,\n",
              " 936.0,\n",
              " 970.0,\n",
              " 993.0,\n",
              " 995.0,\n",
              " 998.0,\n",
              " 999.0,\n",
              " 1014.45,\n",
              " 1047.0,\n",
              " 1061.0,\n",
              " 1077.42,\n",
              " 1086.0,\n",
              " 1120.0,\n",
              " 1150.0,\n",
              " 1172.0,\n",
              " 1186.0,\n",
              " 1193.0,\n",
              " 1194.0,\n",
              " 1196.0,\n",
              " 1197.0,\n",
              " 1198.0,\n",
              " 1199.0,\n",
              " 1240.47,\n",
              " 1242.0,\n",
              " 1248.0,\n",
              " 1272.33,\n",
              " 1298.0,\n",
              " 1299.0,\n",
              " 1341.0,\n",
              " 1343.0,\n",
              " 1364.0,\n",
              " 1368.0,\n",
              " 1373.0,\n",
              " 1374.44,\n",
              " 1388.0,\n",
              " 1390.0,\n",
              " 1395.0,\n",
              " 1396.0,\n",
              " 1399.0,\n",
              " 1405.0,\n",
              " 1422.0,\n",
              " 1461.0,\n",
              " 1462.0,\n",
              " 1468.0,\n",
              " 1489.0,\n",
              " 1493.0,\n",
              " 1494.72,\n",
              " 1495.0,\n",
              " 1496.0,\n",
              " 1497.0,\n",
              " 1498.0,\n",
              " 1499.0,\n",
              " 1582.0,\n",
              " 1586.0,\n",
              " 1590.0,\n",
              " 1591.0,\n",
              " 1595.0,\n",
              " 1596.0,\n",
              " 1597.0,\n",
              " 1598.0,\n",
              " 1781.0,\n",
              " 1794.0,\n",
              " 1796.0,\n",
              " 1797.0,\n",
              " 1798.0,\n",
              " 1799.0,\n",
              " 1896.0,\n",
              " 1948.0,\n",
              " 1950.0,\n",
              " 1956.0,\n",
              " 1968.0,\n",
              " 1969.0,\n",
              " 1978.0,\n",
              " 1984.0,\n",
              " 1985.0,\n",
              " 1991.0,\n",
              " 1995.0,\n",
              " 1997.0,\n",
              " 1998.0,\n",
              " 1999.0,\n",
              " 2092.0,\n",
              " 2112.0,\n",
              " 2147.0,\n",
              " 2148.0,\n",
              " 2179.0,\n",
              " 2198.0,\n",
              " 2199.0,\n",
              " 2200.0,\n",
              " 2216.69,\n",
              " 2349.0,\n",
              " 2354.0,\n",
              " 2359.0,\n",
              " 2359.43,\n",
              " 2360.0,\n",
              " 2362.0,\n",
              " 2393.0,\n",
              " 2400.0,\n",
              " 2446.0,\n",
              " 2477.0,\n",
              " 2487.0,\n",
              " 2489.0,\n",
              " 2494.0,\n",
              " 2495.0,\n",
              " 2496.0,\n",
              " 2497.0,\n",
              " 2498.0,\n",
              " 2499.0,\n",
              " 2523.0,\n",
              " 2689.36,\n",
              " 2696.0,\n",
              " 2698.0,\n",
              " 2706.0,\n",
              " 2720.0,\n",
              " 2755.0,\n",
              " 2771.0,\n",
              " 2773.0,\n",
              " 2835.0,\n",
              " 3200.0,\n",
              " 3597.0,\n",
              " nan,\n",
              " 2143.0,\n",
              " 2609.0,\n",
              " 4134.0,\n",
              " nan,\n",
              " nan,\n",
              " 1599.0,\n",
              " 2149.0,\n",
              " 2694.0,\n",
              " 2894.0,\n",
              " 2925.0,\n",
              " 2953.0,\n",
              " 2956.0,\n",
              " 2967.0,\n",
              " 2979.0,\n",
              " 2982.0,\n",
              " 2987.0,\n",
              " 2993.0,\n",
              " 2995.0,\n",
              " 2996.0,\n",
              " 2997.0,\n",
              " 2999.0,\n",
              " 3197.0,\n",
              " 3198.0,\n",
              " 3436.0,\n",
              " 3498.0,\n",
              " 4367.0,\n",
              " 4395.0,\n",
              " 4806.0,\n",
              " 4951.0,\n",
              " 5000.0,\n",
              " 5204.0,\n",
              " 5461.0,\n",
              " 5998.0}"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['powerBhp']=pd.to_numeric(df.PowerBhp.replace('+AC0-1',None))\n",
        "df.info()\n",
        "df.head"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "v8ZI2CQpOmRF",
        "outputId": "59d6bebd-307d-4609-d519-548eb614f84f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6019 entries, 0 to 6018\n",
            "Data columns (total 13 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   Price         6019 non-null   float64\n",
            " 1   Make          6019 non-null   object \n",
            " 2   Location      6019 non-null   object \n",
            " 3   Age           6019 non-null   int64  \n",
            " 4   Odometer      6019 non-null   int64  \n",
            " 5   FuelType      6019 non-null   object \n",
            " 6   Transmission  6019 non-null   object \n",
            " 7   OwnerType     6019 non-null   object \n",
            " 8   Mileage       6019 non-null   object \n",
            " 9   EngineCC      6016 non-null   float64\n",
            " 10  PowerBhp      6005 non-null   float64\n",
            " 11  mileage       6010 non-null   float64\n",
            " 12  powerBhp      6005 non-null   float64\n",
            "dtypes: float64(5), int64(2), object(6)\n",
            "memory usage: 611.4+ KB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of       Price           Make    Location  Age  Odometer FuelType Transmission  \\\n",
              "0      1.75   marutiwagonr      Mumbai   10     72000      CNG       Manual   \n",
              "1     12.50   hyundaicreta        Pune    5     41000   Diesel       Manual   \n",
              "2      4.50      hondajazz     Chennai    9     46000   Petrol       Manual   \n",
              "3      6.00   marutiertiga     Chennai    8     87000   Diesel       Manual   \n",
              "4     17.74         audia4  Coimbatore    7     40670   Diesel    Automatic   \n",
              "...     ...            ...         ...  ...       ...      ...          ...   \n",
              "6014   4.75    marutiswift       Delhi    6     27365   Diesel       Manual   \n",
              "6015   4.00   hyundaixcent      Jaipur    5    100000   Diesel       Manual   \n",
              "6016   2.90   mahindraxylo      Jaipur    8     55000   Diesel       Manual   \n",
              "6017   2.65   marutiwagonr     Kolkata    7     46000   Petrol       Manual   \n",
              "6018   2.50  chevroletbeat   Hyderabad    9     47000   Diesel       Manual   \n",
              "\n",
              "     OwnerType Mileage  EngineCC  PowerBhp  mileage  powerBhp  \n",
              "0        First    26.6     998.0     58.16    26.60     58.16  \n",
              "1        First   19.67    1582.0    126.20    19.67    126.20  \n",
              "2        First    18.2    1199.0     88.70    18.20     88.70  \n",
              "3        First   20.77    1248.0     88.76    20.77     88.76  \n",
              "4       Second    15.2    1968.0    140.80    15.20    140.80  \n",
              "...        ...     ...       ...       ...      ...       ...  \n",
              "6014     First    28.4    1248.0     74.00    28.40     74.00  \n",
              "6015     First    24.4    1120.0     71.00    24.40     71.00  \n",
              "6016    Second      14    2498.0    112.00    14.00    112.00  \n",
              "6017     First    18.9     998.0     67.10    18.90     67.10  \n",
              "6018     First   25.44     936.0     57.60    25.44     57.60  \n",
              "\n",
              "[6019 rows x 13 columns]>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.generic.NDFrame.head</b><br/>def head(n: int=5) -&gt; Self</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py</a>Return the first `n` rows.\n",
              "\n",
              "This function returns the first `n` rows for the object based\n",
              "on position. It is useful for quickly testing if your object\n",
              "has the right type of data in it.\n",
              "\n",
              "For negative values of `n`, this function returns all rows except\n",
              "the last `|n|` rows, equivalent to ``df[:n]``.\n",
              "\n",
              "If n is larger than the number of rows, this function returns all rows.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "n : int, default 5\n",
              "    Number of rows to select.\n",
              "\n",
              "Returns\n",
              "-------\n",
              "same type as caller\n",
              "    The first `n` rows of the caller object.\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.tail: Returns the last `n` rows.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "&gt;&gt;&gt; df = pd.DataFrame({&#x27;animal&#x27;: [&#x27;alligator&#x27;, &#x27;bee&#x27;, &#x27;falcon&#x27;, &#x27;lion&#x27;,\n",
              "...                    &#x27;monkey&#x27;, &#x27;parrot&#x27;, &#x27;shark&#x27;, &#x27;whale&#x27;, &#x27;zebra&#x27;]})\n",
              "&gt;&gt;&gt; df\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "5     parrot\n",
              "6      shark\n",
              "7      whale\n",
              "8      zebra\n",
              "\n",
              "Viewing the first 5 lines\n",
              "\n",
              "&gt;&gt;&gt; df.head()\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "\n",
              "Viewing the first `n` lines (three in this case)\n",
              "\n",
              "&gt;&gt;&gt; df.head(3)\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "\n",
              "For negative values of `n`\n",
              "\n",
              "&gt;&gt;&gt; df.head(-3)\n",
              "      animal\n",
              "0  alligator\n",
              "1        bee\n",
              "2     falcon\n",
              "3       lion\n",
              "4     monkey\n",
              "5     parrot</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 5729);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(df[['Price','Age','Odometer','mileage','engineCC','powerBhp']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "wwRh2bOIO0Wl",
        "outputId": "1db43776-cf12-40fb-f722-082a92d9d888"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'sns' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-671db5b1f76c>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpairplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Price'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Age'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Odometer'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'mileage'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'engineCC'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'powerBhp'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'sns' is not defined"
          ]
        }
      ]
    }
  ]
}